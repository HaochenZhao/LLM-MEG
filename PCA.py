import numpy as np
import torch, os, time
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

d_id_1 = [1024, 2049, 1538, 3589, 8, 3595, 2572, 3084, 1550, 15, 1041, 1553, 19, 2065, 1557, 2070, 535, 1561, 27, 1564, 2075, 30, 32, 1056, 2594, 3619, 548, 549, 550, 1063, 40, 1576, 3112, 3622, 45, 1070, 561, 1073, 1075, 3122, 2102, 1591, 3641, 1082, 1595, 61, 65, 577, 578, 68, 2116, 2118, 71, 1607, 73, 74, 75, 586, 77, 1611, 1613, 84, 2644, 93, 1117, 3165, 96, 1632, 3168, 2659, 3171, 3685, 3686, 1128, 1641, 1130, 2154, 2155, 3692, 3694, 623, 1135, 3786, 1138, 2676, 2167, 1144, 122, 635, 3711, 128, 129, 1664, 1666, 1156, 3213, 655, 656, 3729, 3733, 1691, 2715, 3739, 1182, 3231, 2720, 1697, 3234, 3749, 678, 1190, 2217, 170, 682, 3758, 2735, 176, 1712, 178, 2224, 2226, 181, 693, 2741, 185, 1727, 1217, 194, 707, 196, 197, 1218, 1730, 1735, 1736, 2757, 203, 716, 717, 2761, 3275, 1232, 2256, 2770, 3279, 3787, 3794, 1752, 729, 1242, 1243, 2265, 1757, 734, 3800, 3807, 3809, 742, 3303, 3819, 3308, 1263, 752, 1776, 1778, 2291, 3317, 1787, 1788, 2300, 767, 256, 1281, 259, 1283, 3843, 3847, 1800, 2314, 2315, 1292, 1805, 271, 783, 1299, 276, 1814, 279, 1304, 2838, 2841, 1308, 2844, 3358, 3869, 1313, 1828, 1830, 2856, 2857, 3369, 300, 812, 1326, 2352, 3888, 2358, 1336, 2366, 831, 1344, 3904, 322, 1346, 1858, 838, 1863, 848, 1367, 1369, 346, 1372, 863, 352, 354, 355, 868, 2916, 359, 3432, 1897, 364, 877, 1389, 2926, 1395, 375, 1401, 2428, 383, 1924, 901, 391, 1419, 396, 1932, 3473, 406, 2455, 2972, 2626, 1950, 1951, 1440, 1441, 3485, 3486, 422, 1448, 1449, 1962, 2987, 941, 1453, 2478, 3501, 948, 439, 3514, 1467, 959, 1474, 2023, 2500, 1993, 3017, 1484, 1999, 2514, 1491, 472, 3546, 2524, 3552, 4064, 483, 1509, 1510, 2021, 2022, 489, 1513, 1515, 1004, 493, 1518, 495, 496, 497, 1010, 1523, 2027, 3050, 502, 1019, 1534]
d_id_2 = [1024, 2049, 1538, 3589, 8, 3595, 2572, 3084, 1550, 15, 1041, 1553, 19, 2065, 1557, 2070, 535, 1561, 27, 1564, 2075, 30, 32, 1056, 2594, 3619, 548, 549, 550, 1063, 40, 1576, 3112, 3622, 45, 1070, 561, 1073, 1075, 3122, 2102, 1591, 3641, 1082, 1595, 61, 65, 577, 578, 68, 2116, 2118, 71, 1607, 73, 74, 75, 586, 77, 1611, 1613, 84, 2644, 93, 1117, 3165, 96, 1632, 3168, 2659, 3171, 3685, 3686, 1128, 1641, 1130, 2154, 2155, 3692, 3694, 623, 1135, 3786, 1138, 2676, 2167, 1144, 122, 635, 3711, 128, 129, 1664, 1666, 1156, 3213, 655, 656, 3729, 3733, 1691, 2715, 3739, 1182, 3231, 2720, 1697, 3234, 3749, 678, 1190, 2217, 170, 682, 3758, 2735, 176, 1712, 178, 2224, 2226, 181, 693, 2741, 185, 1727, 1217, 194, 707, 196, 197, 1218, 1730, 1735, 1736, 2757, 203, 716, 717, 2761, 3275, 1232, 2256, 2770, 3279, 3787, 3794, 1752, 729, 1242, 1243, 2265, 1757, 734, 3800, 3807, 3809, 742, 3303, 3819, 3308, 1263, 752, 1776, 1778, 2291, 3317, 1787, 1788, 2300, 767, 256, 1281, 259, 1283, 3843, 3847, 1800, 2314, 2315, 1292, 1805, 271, 783, 1299, 276, 1814, 279, 1304, 2838, 2841, 1308, 2844, 3358, 3869, 1313, 1828, 1830, 2856, 2857, 3369, 300, 812, 1326, 2352, 3888, 2358, 1336, 2366, 831, 1344, 3904, 322, 1346, 1858, 838, 1863, 848, 1367, 1369, 346, 1372, 863, 352, 354, 355, 868, 2916, 359, 3432, 1897, 364, 877, 1389, 2926, 1395, 375, 1401, 2428, 383, 1924, 901, 391, 1419, 396, 1932, 3473, 406, 2455, 2972, 2626, 1950, 1951, 1440, 1441, 3485, 3486, 422, 1448, 1449, 1962, 2987, 941, 1453, 2478, 3501, 948, 439, 3514, 1467, 959, 1474, 2023, 2500, 1993, 3017, 1484, 1999, 2514, 1491, 472, 3546, 2524, 3552, 4064, 483, 1509, 1510, 2021, 2022, 489, 1513, 1515, 1004, 493, 1518, 495, 496, 497, 1010, 1523, 2027, 3050, 502, 1019, 1534]
d_id_3 = [1024, 2049, 1538, 3589, 8, 3595, 2572, 3084, 1550, 15, 1041, 1553, 19, 2065, 1557, 2070, 535, 1561, 27, 1564, 2075, 30, 32, 1056, 2594, 3619, 548, 549, 550, 1063, 40, 1576, 3112, 3622, 45, 1070, 561, 1073, 1075, 3122, 2102, 1591, 3641, 1082, 1595, 61, 65, 577, 578, 68, 2116, 2118, 71, 1607, 73, 74, 75, 586, 77, 1611, 1613, 84, 2644, 93, 1117, 3165, 96, 1632, 3168, 2659, 3171, 3685, 3686, 1128, 1641, 1130, 2154, 2155, 3692, 3694, 623, 1135, 3786, 1138, 2676, 2167, 1144, 122, 635, 3711, 128, 129, 1664, 1666, 1156, 3213, 655, 656, 3729, 3733, 1691, 2715, 3739, 1182, 3231, 2720, 1697, 3234, 3749, 678, 1190, 2217, 170, 682, 3758, 2735, 176, 1712, 178, 2224, 2226, 181, 693, 2741, 185, 1727, 1217, 194, 707, 196, 197, 1218, 1730, 1735, 1736, 2757, 203, 716, 717, 2761, 3275, 1232, 2256, 2770, 3279, 3787, 3794, 1752, 729, 1242, 1243, 2265, 1757, 734, 3800, 3807, 3809, 742, 3303, 3819, 3308, 1263, 752, 1776, 1778, 2291, 3317, 1787, 1788, 2300, 767, 256, 1281, 259, 1283, 3843, 3847, 1800, 2314, 2315, 1292, 1805, 271, 783, 1299, 276, 1814, 279, 1304, 2838, 2841, 1308, 2844, 3358, 3869, 1313, 1828, 1830, 2856, 2857, 3369, 300, 812, 1326, 2352, 3888, 2358, 1336, 2366, 831, 1344, 3904, 322, 1346, 1858, 838, 1863, 848, 1367, 1369, 346, 1372, 863, 352, 354, 355, 868, 2916, 359, 3432, 1897, 364, 877, 1389, 2926, 1395, 375, 1401, 2428, 383, 1924, 901, 391, 1419, 396, 1932, 3473, 406, 2455, 2972, 2626, 1950, 1951, 1440, 1441, 3485, 3486, 422, 1448, 1449, 1962, 2987, 941, 1453, 2478, 3501, 948, 439, 3514, 1467, 959, 1474, 2023, 2500, 1993, 3017, 1484, 1999, 2514, 1491, 472, 3546, 2524, 3552, 4064, 483, 1509, 1510, 2021, 2022, 489, 1513, 1515, 1004, 493, 1518, 495, 496, 497, 1010, 1523, 2027, 3050, 502, 1019, 1534]

d_ids = [[], d_id_1, d_id_2, d_id_3]

def maket(t):
    t = time.localtime(t)
    t = time.strftime("%Y-%m-%d %H:%M:%S", t)
    return t
    

def find(step,layer):
    device = torch.device("cuda:3" if torch.cuda.is_available() else "cpu")

    work_dir = "/data/zhiang/hidden_states_ns/iter_{:07d}/layer{}".format(step*10000, layer)
    if not os.path.exists(work_dir+"/pca300"):
        os.mkdir(work_dir+"/pca300")

    hs_list = []

    print("step: {}, layer: {}".format(step, layer), "begin analysis at", maket(time.time()))

    txt = np.zeros((0, 4096))
    for i in range(1,11,1):
        t_data = np.load(work_dir+"/total/hs_{}.npy".format(i))
        hs_list.append(t_data)
        txt = np.concatenate((txt, t_data), axis=0)

    txt = torch.from_numpy(txt).float().to(device)
    cor = torch.corrcoef(txt.T)
    print(cor.shape)
    cor = cor.cpu().numpy()

    
    index = []
    
    for i in range(4096):
        for j in range(i+1, 4096):
            if abs(cor[i, j]) > 0.85:
                index.append(i)
    index = list(set(index))
    print(len(index))

    for ses in range(1,11,1):
        print("step: {}, layer: {}, session: {}".format(step, layer, ses), "begin pca at", maket(time.time()))
        data = hs_list[ses-1]
        data = np.delete(data, index, axis=1)
    
        n, m = data.shape
        print(n, m)
        k = 300

        pca = PCA(n_components=k)

        data = data - data.mean(axis=0, keepdims=True)

        pca.fit(data)
        P_data = pca.transform(data)
        ratios = pca.explained_variance_ratio_

        print(P_data.shape, ratios)

        x = list(range(k))
        r = [np.sum(ratios[:i]) for i in x]
        plt.title("PCA ratios sum i{}_l{}_s{} n{}".format(step, layer, ses, len(index)))
        plt.plot(x, r)
        plt.savefig(work_dir+"/pca300/pca_300_hs_{}.png".format(ses))
        plt.close()

        np.save(work_dir+"/pca300/pca_300_hs_{}.npy".format(ses), P_data)



if __name__ == '__main__':
    print("begin at", maket(time.time()))
    for step in [20, 25, 30, 35, 40, 42]:
        for layer in range(33):
            find(step, layer)
    print("end at", maket(time.time()))